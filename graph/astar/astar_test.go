package astar

import (
	"testing"
)

func TestMaxDim(t *testing.T) {
	Dim := 2 << 9 // 10 11 is fast
	graph := New(Dim, Dim)
	graph.SetTarget(0, 0, Dim-1, Dim-1)
	graph.Search()
	if graph.GetSteps(graph.GetPath()) != 2046 {
		t.Error(graph.GetSteps(graph.GetPath()))
	}
}

func TestSimplePathLen(t *testing.T) {
	graph := NewWithTiles(`
	....
	....
	....
	....
	`)
	graph.SetTarget(0, 0, graph.dimX-1, graph.dimY-1)
	graph.Search()
	if graph.GetSteps(graph.GetPath()) != 6 {
		t.Error(graph.GetSteps(graph.GetPath()), graph.GetSinglePathTiles())
	}

	graph.Clear()

	graph.SetTarget(0, 0, graph.dimX-2, graph.dimY-2)
	if !graph.Search() {
		t.Error("Clear error")
	}

	if graph.GetSteps(graph.GetPath()) != 4 {
		t.Error(graph.GetSteps(graph.GetPath()), graph.GetSinglePathTiles())
	}
}

func TestNoPath(t *testing.T) {
	graph := New(32, 32)
	graph.SetStringTiles(`
	e...............................
	xxxx.......xxxxxxxxxxxxxxxxxxxxx
	...x.......x................x...
	...x.......x.xxxxxxxxxxxxxxxx...
	...x.......x....................
	...xxx.....xxxxxxxxxxxxxxxxxxxx.
	.....xx....x....................
	......xx...x..xxxxxxxxxxxxxxxxxx
	.......xx..x....................
	........xx.x....................
	.........xxxxxxxxxxxxxxxxxxxxx..
	..........xx....................
	...........xx..xxxxxxxxxxxxxxxxx
	............xx..................
	.............xxxxxxxxxxxxxxxxxx.
	..............xx................
	...............xx...............
	................xx..............
	.................xx.............
	..................xx............
	.xxxxxxxxxxxxxxxxxxxx...........
	....................xx..........
	.....................xx.........
	xxxxxxxxxxxxxxxxxx....xx........
	.......................xx.......
	.xxxxxxxxxxxxxxxxxxxxxxxxx......
	.........................xx.....
	xxxxxxxxxxxxxxxxxx........xx....
	...........................xx...
	............................xx..
	.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.
	...............................s
	`)
	if graph.Search() {
		t.Error("should be no path")
	}
}

func TestSearch8Dir(t *testing.T) {
	graph := New(32, 32)
	graph.SetNeighbor(&Neighbor8{})
	graph.SetStringTiles(`
	e...............................
	xxxx.......xxxxxxxxxxxxxxxx.xxxx
	...x.......x................x...
	...x.......x.xxxxxxxxxxxxxxxx...
	...x.......x....................
	...xxx.....xxxxxxxxxxxxxxxxxxxx.
	.....xx....x....................
	......xx...x..xxxxxxxxxxxxxxxxxx
	.......xx..x....................
	........xx.x....................
	.........xxxxxxxxxxxxxxxxxxxxx..
	..........xx....................
	...........xx..xxxxxxxxxxxxxxxxx
	............xx..................
	.............xxxxxxxxxxxxxxxxxx.
	..............xx................
	...............xx...............
	................xx..............
	.................xx.............
	..................xx............
	.xxxxxxxxxxxxxxxxxxxx...........
	....................xx..........
	.....................xx.........
	xxxxxxxxxxxxxxxxxx....xx........
	.......................xx.......
	.xxxxxxxxxxxxxxxxxxxxxxxxx......
	.........................xx.....
	xxxxxxxxxxxxxxxxxx........xx....
	...........................xx...
	............................xx..
	.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.
	...............................s
	`)
	if !graph.Search() {
		t.Error("why not find the path?")
	}
	stiles := graph.GetSinglePathTiles()
	wantTiles := `
eooo.o.o.o.oooooooooooooooo.....
xxxxo.o.o.oxxxxxxxxxxxxxxxxoxxxx
...x.......x.oooooooooooooo.x...
...x.......xoxxxxxxxxxxxxxxxxo..
...x.......x.oooooooooooooooo.o.
...xxx.....xxxxxxxxxxxxxxxxxxxxo
.....xx....x..ooooooooooooooooo.
......xx...x.oxxxxxxxxxxxxxxxxxx
.......xx..x..o.o.o.o.o.o.o.o...
........xx.x...o.o.o.o.o.o.o.o..
.........xxxxxxxxxxxxxxxxxxxxxo.
..........xx...ooooooooooooooo..
...........xx.oxxxxxxxxxxxxxxxxx
............xx.oooooooooooooooo.
.............xxxxxxxxxxxxxxxxxxo
..............xx..............o.
...............xx............o..
................xx..........o...
.................xx........o....
..................xx......o.....
.xxxxxxxxxxxxxxxxxxxx....o......
....................xx..o.......
.....................xxo........
xxxxxxxxxxxxxxxxxx....xxo.......
.......................xxo......
.xxxxxxxxxxxxxxxxxxxxxxxxxo.....
.........................xxo....
xxxxxxxxxxxxxxxxxx........xxo...
...........................xxo..
............................xxo.
.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo
...............................s
`
	if stiles != wantTiles {
		t.Error("path is not that my want", stiles, wantTiles)
	}
}

func TestSearch4Dir(t *testing.T) {
	graph := New(32, 32)
	graph.SetStringTiles(`
	e...............................
	xxxx.......xxxxxxxxxxxxxxxx.xxxx
	...x.......x................x...
	...x.......x.xxxxxxxxxxxxxxxx...
	...x.......x....................
	...xxx.....xxxxxxxxxxxxxxxxxxxx.
	.....xx....x....................
	......xx...x..xxxxxxxxxxxxxxxxxx
	.......xx..x....................
	........xx.x....................
	.........xxxxxxxxxxxxxxxxxxxxx..
	..........xx....................
	...........xx..xxxxxxxxxxxxxxxxx
	............xx..................
	.............xxxxxxxxxxxxxxxxxx.
	..............xx................
	...............xx...............
	................xx..............
	.................xx.............
	..................xx............
	.xxxxxxxxxxxxxxxxxxxx...........
	....................xx..........
	.....................xx.........
	xxxxxxxxxxxxxxxxxx....xx........
	.......................xx.......
	.xxxxxxxxxxxxxxxxxxxxxxxxx......
	.........................xx.....
	xxxxxxxxxxxxxxxxxx........xx....
	...........................xx...
	............................xx..
	.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.
	...............................s
	`)
	if !graph.Search() {
		t.Error("why not find the path?")
	}
	stiles := graph.GetSinglePathTiles()
	wantTiles := `
eooooooooooooooooooooooooooo....
xxxx.......xxxxxxxxxxxxxxxxoxxxx
...x.......xoooooooooooooooox...
...x.......xoxxxxxxxxxxxxxxxx...
...x.......xoooooooooooooooooooo
...xxx.....xxxxxxxxxxxxxxxxxxxxo
.....xx....x.ooooooooooooooooooo
......xx...x.oxxxxxxxxxxxxxxxxxx
.......xx..x.o..................
........xx.x.oooooooooooooooooo.
.........xxxxxxxxxxxxxxxxxxxxxo.
..........xx..ooooooooooooooooo.
...........xx.oxxxxxxxxxxxxxxxxx
............xxoooooooooooooooooo
.............xxxxxxxxxxxxxxxxxxo
..............xx...............o
...............xx..............o
................xx.............o
.................xx............o
..................xx...........o
.xxxxxxxxxxxxxxxxxxxx..........o
....................xx.........o
.....................xx........o
xxxxxxxxxxxxxxxxxx....xx.......o
.......................xx......o
.xxxxxxxxxxxxxxxxxxxxxxxxx.....o
.........................xx....o
xxxxxxxxxxxxxxxxxx........xx...o
...........................xx..o
............................xx.o
.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo
...............................s
`
	if stiles != wantTiles {
		t.Error("path is not that my want", stiles, wantTiles)
	}
}

func TestNewWithTiles(t *testing.T) {
	graph := NewWithTiles(`
	e...............................
	xxxx.......xxxxxxxxxxxxxxxx.xxxx
	...x.......x................x...
	...x.......x.xxxxxxxxxxxxxxxx...
	...x.......x....................
	...xxx.....xxxxxxxxxxxxxxxxxxxx.
	.....xx....x....................
	......xx...x..xxxxxxxxxxxxxxxxxx
	.......xx..x....................
	........xx.x....................
	.........xxxxxxxxxxxxxxxxxxxxx..
	..........xx....................
	...........xx..xxxxxxxxxxxxxxxxx
	............xx..................
	.............xxxxxxxxxxxxxxxxxx.
	..............xx................
	...............xx...............
	................xx..............
	.................xx.............
	..................xx............
	.xxxxxxxxxxxxxxxxxxxx...........
	....................xx..........
	.....................xx.........
	xxxxxxxxxxxxxxxxxx....xx........
	.......................xx.......
	.xxxxxxxxxxxxxxxxxxxxxxxxx......
	.........................xx.....
	xxxxxxxxxxxxxxxxxx........xx....
	...........................xx...
	............................xx..
	.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.
	...............................s
	`)

	if dimX, dimY := graph.GetDimension(); dimX != 32 && dimY != 32 {
		t.Error("dim error")
	}

	if !graph.Search() {
		t.Error("why not find the path?")
	}
	stiles := graph.GetSinglePathTiles()
	wantTiles := `
eooooooooooooooooooooooooooo....
xxxx.......xxxxxxxxxxxxxxxxoxxxx
...x.......xoooooooooooooooox...
...x.......xoxxxxxxxxxxxxxxxx...
...x.......xoooooooooooooooooooo
...xxx.....xxxxxxxxxxxxxxxxxxxxo
.....xx....x.ooooooooooooooooooo
......xx...x.oxxxxxxxxxxxxxxxxxx
.......xx..x.o..................
........xx.x.oooooooooooooooooo.
.........xxxxxxxxxxxxxxxxxxxxxo.
..........xx..ooooooooooooooooo.
...........xx.oxxxxxxxxxxxxxxxxx
............xxoooooooooooooooooo
.............xxxxxxxxxxxxxxxxxxo
..............xx...............o
...............xx..............o
................xx.............o
.................xx............o
..................xx...........o
.xxxxxxxxxxxxxxxxxxxx..........o
....................xx.........o
.....................xx........o
xxxxxxxxxxxxxxxxxx....xx.......o
.......................xx......o
.xxxxxxxxxxxxxxxxxxxxxxxxx.....o
.........................xx....o
xxxxxxxxxxxxxxxxxx........xx...o
...........................xx..o
............................xx.o
.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo
...............................s
`
	if stiles != wantTiles {
		t.Error("path is not that my want", stiles, wantTiles)
	}
}

func TestSetAttr(t *testing.T) {
	graph := NewWithTiles(`
	....
	....
	....
	....
	`)

	graph.SetAttr(1, 1, BLOCK)
	graph.SetAttr(2, 1, BLOCK)
	graph.SetAttr(2, 2, BLOCK)

	if graph.GetTiles() != `
....
.xx.
..x.
....
` {
		t.Error(graph.GetTiles())
	}

	graph.SetTarget(0, 0, 3, 3)
	if graph.GetAttr(3, 3) == END { // Get
		t.Error(graph.GetTiles())
	}

	if graph.GetTilesWithTarget() != `
s...
.xx.
..x.
...e
` {
		t.Error(graph.GetTilesWithTarget())
	}

}

func Test8dir(t *testing.T) {
	a := NewWithTiles(`
	sx......
	x.......
	.xxxxxx.
	.......x
	.xxxxxxe
	`)
	a.SetNeighbor(&Neighbor8{})
	if !a.SearchMulti() && len(a.GetMultiPath()) < 2 {
		t.Error("check 8dir")
	}
}
